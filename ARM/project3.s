@project 3 safe control by Jacob Idolor 
@key things to keep track of
@1. The PC counter R15 I need to learn how to navigate it using different counters. 
@2. for my own personal use if there is an error I need 
@ to make a branch that will light up the led and show E it does not have to be seen. 
@R5 will hold the Array called CODES
@R6 will hold the temporary array that will later be used. Use to compare as well
@ #16 indicates end of code sequence 
@#17 indicates end of codes array 
@ How to add a value to an array
@ MOV R1, #7 
@STR R1, [R5]
@Add R5, R5, #4 
@if I an doing it by byte then 
@MOV R1, #7 
@STRB R1, [R5]
@Add R5, R5, #1 
@ or one big command STMEA R5!, {R1}
@ all three of these add a value into an array and then shift over. 
@ segment display and led SWI short cuts
.equ Seg_A ,0x80
.equ Seg_B ,0x40
.equ Seg_C ,0x20
.equ Seg_D ,0x08
.equ Seg_E ,0x04
.equ Seg_F ,0x02
.equ Seg_G ,0x01
.equ SWI_8SEG, 0x200
.equ SWI_BLKCHK, 0x202
.equ SWI_BLUECHK,0x203

.equ BLUE_KEY_00, 0x01 @button(0)

.equ BLUE_KEY_01, 0x02 @button(1)

.equ BLUE_KEY_02, 0x04 @button(2)

.equ BLUE_KEY_03, 0x08 @button(3)

.equ BLUE_KEY_04, 0x10 @button(4)

.equ BLUE_KEY_05, 0x20 @button(5)

.equ BLUE_KEY_06, 0x40 @button(6)

.equ BLUE_KEY_07, 0x80 @button(7)

.equ BLUE_KEY_08, 1<<8 @button(8) 

.equ BLUE_KEY_09, 1<<9 @button(9)

.equ BLUE_KEY_10, 1<<10 @button(10)

.equ BLUE_KEY_11, 1<<11 @button(11)

.equ BLUE_KEY_12, 1<<12 @button(12)

.equ BLUE_KEY_13, 1<<13 @button(13)

.equ BLUE_KEY_14, 1<<14 @button(14)

.equ BLUE_KEY_15, 1<<15 @button(15)


UNLOCKED: 
LDR R0 , =Seg_G|Seg_E|Seg_D|Seg_C|Seg_B
SWI SWI_8SEG
CHECKBUTTON:
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LEFTBUTTON
CMP R0,#0x01
BEQ RIGHTBUTTON
B CHECKBUTTON


LEFTBUTTON:
LDR R5,=CODES
LOCKCHECK: 
CMP R7, #0
BEQ ERRORNOCODE
BAL LOCKED

ERRORNOCODE:
LDR R0,=Seg_A|Seg_G|Seg_F|Seg_D|Seg_E
SWI SWI_8SEG
B UNLOCKED


LOCKED:
LDR R5,=CODES
LDR R0,=Seg_G|Seg_E|Seg_D
SWI SWI_8SEG
LOCKEDLOOP:
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LOCKED 
CMP R0,#0x01
BEQ LOCKED
SWI SWI_BLUECHK
CMP R0,#0 
BEQ LOCKEDLOOP
CMP R0,#BLUE_KEY_00
BEQ ZEROLOCK
CMP R0,#BLUE_KEY_01
BEQ ONELOCK
CMP R0,#BLUE_KEY_02
BEQ TWOLOCK
CMP R0,#BLUE_KEY_03
BEQ THREELOCK
CMP R0,#BLUE_KEY_04
BEQ FOURLOCK
CMP R0,#BLUE_KEY_05
BEQ FIVELOCK 
CMP R0,#BLUE_KEY_06
BEQ SIXLOCK 
CMP R0,#BLUE_KEY_07
BEQ SEVENLOCK 
CMP R0,#BLUE_KEY_08
BEQ EIGHTLOCK 
CMP R0,#BLUE_KEY_09
BEQ NINELOCK
CMP R0,#BLUE_KEY_10
BEQ TENLOCK
CMP R0,#BLUE_KEY_11
BEQ ELEVENLOCK 
CMP R0,#BLUE_KEY_12
BEQ TWELVELOCK
CMP R0,#BLUE_KEY_13
BEQ THRITEENLOCK
CMP R0,#BLUE_KEY_14
BEQ FOURTEENLOCK 
CMP R0,#BLUE_KEY_15
BEQ FIFTEENLOCK
BAL LOCKED

GOODCODE:
ADD R5,R5, #4
LDR R9, [R5]
CMP R9, #16
BEQ WAITTOBUTTONPRESS
BAL LOCKEDLOOP
 
WAITTOBUTTONPRESS:
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LOCKED
CMP R0,#0x01
BEQ UNLOCKED
BAL WAITTOBUTTONPRESS


ZEROLOCK:
LDR R9, [R5]
CMP R9, #0 
BEQ GOODCODE
BAL SWEEPORERROR
ONELOCK:
LDR R9, [R5]
CMP R9, #1 
BEQ GOODCODE
BAL SWEEPORERROR
TWOLOCK:
LDR R9, [R5]
CMP R9, #2 
BEQ GOODCODE
BAL SWEEPORERROR
THREELOCK:
LDR R9, [R5]
CMP R9, #3 
BEQ GOODCODE
BAL SWEEPORERROR
FOURLOCK:
LDR R9, [R5]
CMP R9, #4 
BEQ GOODCODE
BAL SWEEPORERROR
FIVELOCK:
LDR R9, [R5]
CMP R9, #5 
BEQ GOODCODE
BAL SWEEPORERROR
SIXLOCK:
LDR R9, [R5]
CMP R9, #6 
BEQ GOODCODE
BAL SWEEPORERROR
SEVENLOCK:
LDR R9, [R5]
CMP R9, #7 
BEQ GOODCODE
BAL SWEEPORERROR
EIGHTLOCK:
LDR R9, [R5]
CMP R9, #8 
BEQ GOODCODE
BAL SWEEPORERROR
NINELOCK:
LDR R9, [R5]
CMP R9, #9 
BEQ GOODCODE
BAL SWEEPORERROR
TENLOCK:
LDR R9, [R5]
CMP R9, #10 
BEQ GOODCODE
BAL SWEEPORERROR
ELEVENLOCK:
LDR R9, [R5]
CMP R9, #11 
BEQ GOODCODE
BAL SWEEPORERROR
TWELVELOCK:
LDR R9, [R5]
CMP R9, #12 
BEQ GOODCODE
BAL SWEEPORERROR
THRITEENLOCK:
LDR R9, [R5]
CMP R9, #13
BEQ GOODCODE
BAL SWEEPORERROR
FOURTEENLOCK:
LDR R9, [R5]
CMP R9, #14 
BEQ GOODCODE
BAL SWEEPORERROR
FIFTEENLOCK:
LDR R9, [R5]
CMP R9, #15 
BEQ GOODCODE
BAL SWEEPORERROR



SWEEPORERROR:
LDR R9, [R5]
CMP R9, #16
BNE ERRORWRONGCODE
ADD R5,R5, #4 
LDR R9, [R5] 
CMP R9, #16 
BEQ NEXTSET
BAL SWEEPORERROR

NEXTSET: 
ADD R5, R5, #4
BAL LOCKEDLOOP

ERRORWRONGCODE:
LDR R5,=CODES
LDR R0,=Seg_A|Seg_G|Seg_F|Seg_D|Seg_E
SWI SWI_8SEG
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LOCKED
CMP R0,#0x01
BEQ LOCKED
BAL ERRORWRONGCODE

RIGHTBUTTON: 
@CHANGE 8 bit to program P also check to see if 
@black has been pressed at any time 
@ Also check to see the blue buttons to add to array
LDR R0,=Seg_A|Seg_B|Seg_F|Seg_G|Seg_E
LDR R5,=CODES
LDR R6,=TEMPCODES
SWI SWI_8SEG
BLKCHK:
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LEFTBUTTON
CMP R0,#0x01
BEQ ENDOFCODE
SWI SWI_BLUECHK
CMP R0,#0 
BEQ BLKCHK
CMP R0,#BLUE_KEY_00
BEQ ZERO
CMP R0,#BLUE_KEY_01
BEQ ONE
CMP R0,#BLUE_KEY_02
BEQ TWO
CMP R0,#BLUE_KEY_03
BEQ THREE
CMP R0,#BLUE_KEY_04
BEQ FOUR
CMP R0,#BLUE_KEY_05
BEQ FIVE 
CMP R0,#BLUE_KEY_06
BEQ SIX 
CMP R0,#BLUE_KEY_07
BEQ SEVEN 
CMP R0,#BLUE_KEY_08
BEQ EIGHT 
CMP R0,#BLUE_KEY_09
BEQ NINE
CMP R0,#BLUE_KEY_10
BEQ TEN 
CMP R0,#BLUE_KEY_11
BEQ ELEVEN 
CMP R0,#BLUE_KEY_12
BEQ TWELVE
CMP R0,#BLUE_KEY_13
BEQ THRITEEN
CMP R0,#BLUE_KEY_14
BEQ FOURTEEN 
CMP R0,#BLUE_KEY_15
BEQ FIFTEEN
BAL BLKCHK

ZERO:
MOV R1, #0
STR R1, [R6]
ADD R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
ONE:
MOV R1, #1
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
TWO:
MOV R1, #2
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
THREE:
MOV R1, #3
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
FOUR:
MOV R1, #4
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
FIVE:
MOV R1, #5
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
SIX:
MOV R1, #6
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
SEVEN:
MOV R1, #7
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
EIGHT:
MOV R1, #8
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
NINE:
MOV R1, #9
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
TEN:
MOV R1, #10
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
ELEVEN:
MOV R1, #11
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
TWELVE:
MOV R1, #12
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
THRITEEN:
MOV R1, #13
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
FOURTEEN:
MOV R1, #14
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK
FIFTEEN:
MOV R1, #15
STR R1, [R6]
Add R6, R6, #4
ADD R3,R3, #1
BAL BLKCHK

ENDOFCODE: 
MOV R1, #16
STR R1, [R6]
Add R6, R6, #4
BAL CHECKARRAY

SWEEP: 
@once a number doesnt match move until the next position is a 16 
@move over one more time then go to next value
CMP R7, #0 
BEQ CONFIRM
BNE ERROR

 


CHECKARRAY:
@this needs to check both arrays the moment a number doesn't match then 
@ go to confirm if there is a match then forget
LDR R6,=TEMPCODES
LDR R5,=CODES
LOOP:
LDR R8, [R6]
LDR R9, [R5]
CMP R9,R8
BEQ NEXTLOOP
BNE SWEEP


NEXTLOOP:
CMP R8, #16
BEQ FORGET
ADD R5,R5, #4 
ADD R6,R6, #4
BAL LOOP

CONFIRM:
@compare value in temp array to numbers being entered
@give error if no return to confirm match
LDR R0,=Seg_A|Seg_E|Seg_G|Seg_E|Seg_D
SWI SWI_8SEG
LDR R6,=TEMPCODES
CONFIRMCHK:
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LEFTBUTTON
CMP R0,#0x01
BEQ CHECKEND
SWI SWI_BLUECHK
CMP R0,#0 
BEQ CONFIRMCHK
CMP R0,#BLUE_KEY_00
BEQ ZEROCHK
CMP R0,#BLUE_KEY_01
BEQ ONECHK
CMP R0,#BLUE_KEY_02
BEQ TWOCHK
CMP R0,#BLUE_KEY_03
BEQ THREECHK
CMP R0,#BLUE_KEY_04
BEQ FOURCHK
CMP R0,#BLUE_KEY_05
BEQ FIVECHK 
CMP R0,#BLUE_KEY_06
BEQ SIXCHK 
CMP R0,#BLUE_KEY_07
BEQ SEVENCHK
CMP R0,#BLUE_KEY_08
BEQ EIGHTCHK 
CMP R0,#BLUE_KEY_09
BEQ NINECHK
CMP R0,#BLUE_KEY_10
BEQ TENCHK 
CMP R0,#BLUE_KEY_11
BEQ ELEVENCHK 
CMP R0,#BLUE_KEY_12
BEQ TWELVECHK
CMP R0,#BLUE_KEY_13
BEQ THRITEENCHK
CMP R0,#BLUE_KEY_14
BEQ FOURTEENCHK 
CMP R0,#BLUE_KEY_15
BEQ FIFTEENCHK
B CONFIRMCHK


NEXT:
ADD R6,R6, #4
B CONFIRMCHK

ZEROCHK:
LDR R8,[R6]
CMP R8, #0 
BEQ NEXT 
B ERROR
ONECHK:
LDR R8,[R6]
CMP R8, #1
BEQ NEXT 
B ERROR
TWOCHK:
LDR R8, [R6]
CMP R8, #2
BEQ NEXT 
B ERROR
THREECHK:
LDR R8, [R6]
CMP R8, #3
BEQ NEXT 
B ERROR
FOURCHK:
LDR R8, [R6]
CMP R8, #4 
BEQ NEXT 
B ERROR
FIVECHK:
LDR R8, [R6]
CMP R8, #5 
BEQ NEXT 
B ERROR
SIXCHK:
LDR R8, [R6]
CMP R8, #6 
BEQ NEXT 
B ERROR
SEVENCHK:
LDR R8, [R6]
CMP R8, #7 
BEQ NEXT 
B ERROR
EIGHTCHK:
LDR R8, [R6]
CMP R8, #8
BEQ NEXT 
B ERROR
NINECHK:
LDR R8, [R6]
CMP R8, #9
BEQ NEXT 
B ERROR
TENCHK:
LDR R8, [R6]
CMP R8, #10 
BEQ NEXT 
B ERROR
ELEVENCHK:
LDR R8, [R6]
CMP R8, #11 
BEQ NEXT 
B ERROR
TWELVECHK:
LDR R8, [R6]
CMP R8, #12 
BEQ NEXT 
B ERROR
THRITEENCHK:
LDR R8, [R6]
CMP R8, #13 
BEQ NEXT 
B ERROR
FOURTEENCHK:
LDR R8, [R6]
CMP R8, #14
BEQ NEXT 
B ERROR
FIFTEENCHK:
LDR R8, [R6]
CMP R8, #15
BEQ NEXT 
B ERROR


ERROR:
MOV R1, #0 
STR R1, [R6] 
MOV R3, #0
LDR R0,=Seg_A|Seg_G|Seg_F|Seg_D|Seg_E
SWI SWI_8SEG
MOV R3, #0
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LEFTBUTTON
CMP R0,#0x01
BEQ RIGHTBUTTON
BAL ERROR

CHECKENDFORGET:
LDR R8, [R5]
CMP R8, #16 
BEQ SUCESSFULFORGET
BAL ERROR
SUCESSFULFORGET:
LDR R5,=CODES
LDR R0,=Seg_A|Seg_E|Seg_F|Seg_G|Seg_B|Seg_C
SWI SWI_8SEG
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LEFTBUTTON
CMP R0,#0x01
BEQ RIGHTBUTTON
MOV R1, #0 
STR R1, [R5] 
MOV R7, #0
BAL SUCESSFULFORGET





ADDTOCODES:
LDR R6,=TEMPCODES
LDR R5,=CODES
LDR R9,[R5]
LDR R8,[R6]
CMP R7, #0
BEQ ADDCODESEMPTY
BAL ERROR

ADDCODESEMPTY:
LDR R6,=TEMPCODES
LDR R5,=CODES
ADDCODESEMPTYLOOP:
ADD R7,R7, #1 
LDR R9,[R5]
LDR R8,[R6]
CMP R8, #16 
BEQ ENDOFADD
STR R8,[R5]
ADD R6,R6, #4
ADD R5,R5, #4
BAL ADDCODESEMPTYLOOP


ENDOFADD:
MOV R8, #16 
STR R8,[R5]
BAL SUCESSFUL


SUCESSFUL:
LDR R6,=TEMPCODES
LDR R0,=Seg_A|Seg_E|Seg_F|Seg_G|Seg_B|Seg_C
SWI SWI_8SEG
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LEFTBUTTON
CMP R0,#0x01
BEQ RIGHTBUTTON
MOV R1, #0 
STR R1, [R6] 
MOV R3, #0
BAL SUCESSFUL

CHECKEND:
LDR R8, [R6]
CMP R8, #16 
BEQ ADDTOCODES
BAL ERROR

FORGET:
LDR R0,=Seg_A|Seg_E|Seg_G|Seg_F
SWI SWI_8SEG
LDR R5,=CODES
FORGETCHK:
SWI SWI_BLKCHK
CMP R0,#0x02
BEQ LEFTBUTTON
CMP R0,#0x01
BEQ CHECKENDFORGET
SWI SWI_BLUECHK
CMP R0,#0 
BEQ FORGETCHK
CMP R0,#BLUE_KEY_00
BEQ ZEROCHKFORGET
CMP R0,#BLUE_KEY_01
BEQ ONECHKFORGET
CMP R0,#BLUE_KEY_02
BEQ TWOCHKFORGET
CMP R0,#BLUE_KEY_03
BEQ THREECHKFORGET
CMP R0,#BLUE_KEY_04
BEQ FOURCHKFORGET
CMP R0,#BLUE_KEY_05
BEQ FIVECHKFORGET 
CMP R0,#BLUE_KEY_06
BEQ SIXCHKFORGET 
CMP R0,#BLUE_KEY_07
BEQ SEVENCHKFORGET
CMP R0,#BLUE_KEY_08
BEQ EIGHTCHKFORGET 
CMP R0,#BLUE_KEY_09
BEQ NINECHKFORGET
CMP R0,#BLUE_KEY_10
BEQ TENCHKFORGET 
CMP R0,#BLUE_KEY_11
BEQ ELEVENCHKFORGET 
CMP R0,#BLUE_KEY_12
BEQ TWELVECHKFORGET
CMP R0,#BLUE_KEY_13
BEQ THRITEENCHKFORGET
CMP R0,#BLUE_KEY_14
BEQ FOURTEENCHKFORGET 
CMP R0,#BLUE_KEY_15
BEQ FIFTEENCHKFORGET
B FORGETCHK


NEXTFORGET:
ADD R5,R5, #4
B FORGETCHK

ZEROCHKFORGET:
LDR R8,[R5]
CMP R8, #0 
BEQ NEXTFORGET 
B ERROR
ONECHKFORGET:
LDR R8,[R5]
CMP R8, #1
BEQ NEXTFORGET 
B ERROR
TWOCHKFORGET:
LDR R8, [R5]
CMP R8, #2
BEQ NEXTFORGET 
B ERROR
THREECHKFORGET:
LDR R8, [R5]
CMP R8, #3
BEQ NEXTFORGET 
B ERROR
FOURCHKFORGET:
LDR R8, [R5]
CMP R8, #4 
BEQ NEXTFORGET 
B ERROR
FIVECHKFORGET:
LDR R8, [R5]
CMP R8, #5 
BEQ NEXTFORGET 
B ERROR
SIXCHKFORGET:
LDR R8, [R5]
CMP R8, #6 
BEQ NEXTFORGET 
B ERROR
SEVENCHKFORGET:
LDR R8, [R5]
CMP R8, #7 
BEQ NEXTFORGET 
B ERROR
EIGHTCHKFORGET:
LDR R8, [R5]
CMP R8, #8
BEQ NEXTFORGET 
B ERROR
NINECHKFORGET:
LDR R8, [R5]
CMP R8, #9
BEQ NEXTFORGET
B ERROR
TENCHKFORGET:
LDR R8, [R5]
CMP R8, #10 
BEQ NEXTFORGET 
B ERROR
ELEVENCHKFORGET:
LDR R8, [R5]
CMP R8, #11 
BEQ NEXTFORGET 
B ERROR
TWELVECHKFORGET:
LDR R8, [R5]
CMP R8, #12 
BEQ NEXTFORGET 
B ERROR
THRITEENCHKFORGET:
LDR R8, [R5]
CMP R8, #13 
BEQ NEXTFORGET 
B ERROR
FOURTEENCHKFORGET:
LDR R8, [R5]
CMP R8, #14
BEQ NEXTFORGET 
B ERROR
FIFTEENCHKFORGET:
LDR R8, [R5]
CMP R8, #15
BEQ NEXTFORGET 
B ERROR






@This just overides the value if it does reach then end and 
@ there is still code replace with zero then sweep until you reach the new end
.DATA
CODES: .skip 1024 
TEMPCODES: .skip 1024 
